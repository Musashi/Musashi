//
// Grid system
// --------------------------------------------------

/*doc
---
title: Introduction
name: a-intro
category: Layout - Grid system
---

Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's how the Bootstrap grid system works:

  * Rows must be placed within a `.container` (fixed-width) or `.container-fluid` (full-width) for proper alignment and padding.
  * Use rows to create horizontal groups of columns.
  * Content should be placed within columns, and only columns may be immediate children of rows.
  * Predefined components like `<m-row>` and `.col-xs-4` are available for quickly making grid layouts. Less mixins can also be used for more semantic layouts.
  * Columns create gutters (gaps between column content) via `padding`. That padding is offset in rows for the first and last column via negative margin on `<m-row>`.
  * The negative margin is why the examples below are outdented. It's so that content within grid columns is lined up with non-grid content.
  * Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three `.col-xs-4`.
  * If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.
  * Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override grid classes targeted at smaller devices. Therefore, applying any `.col-md-` class to an element will not only affect its styling on medium devices but also on large devices if a `.col-lg-` class is not present.
  * Look to the examples for applying these principles to your code.
*/

/*doc
---
title: Media queries
name: b-media-queries
category: Layout - Grid system
---

We use the following media queries in our Less files to create the key breakpoints in our grid system.

```sass
// Extra small devices (phones, less than 768px)
// No media query since this is the default in Bootstrap

// Small devices (tablets, 768px and up)
@media (min-width: $screen-sm-min) { ... }

// Medium devices (desktops, 992px and up)
@media (min-width: $screen-md-min) { ... }

// Large devices (large desktops, 1200px and up)
@media (min-width: $screen-lg-min) { ... }
```

We occasionally expand on these media queries to include a `max-width` to limit CSS to a narrower set of devices.

```sass
@media (max-width: @screen-xs-max) { ... }
@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }
@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }
@media (min-width: @screen-lg-min) { ... }
```
*/

/*doc
---
title: Grid option
name: c-grid-options
category: Layout - Grid system
---

See how aspects of the Bootstrap grid system work across multiple devices with a handy table.

|                     | Extra small devices Phones (<768px) | Small devices Tablets (≥768px) | Medium devices Desktops (≥992px) | Large devices Desktops (≥1200px) |
|---------------------|:-----------------------------------:|:------------------------------:|:--------------------------------:|:--------------------------------:|
| **Grid behavior**   | Horizontal at all times             | Collapsed to start, horizontal above breakpoints                                                   |||
| **Container width** | None (auto)                         | 750px                          | 970px                            | 1170px                           |
| **Class prefix**    | `.col-xs-`                          | `.col-sm-`                     | `.col-md-`                       | `.col-lg-`                       |
| **# of columns**    | 12                                                                                                                                      ||||
| **Column width**    | Auto                                | ~62px                          | ~81px                            | ~97px                            |
| **Gutter width**    | 30px (15px on each side of a column)                                                                                                    ||||
| **Nestable**        | Yes                                 | Yes                            | Yes                              | Yes                           ||||
| **Offsets**         | Yes                                 | Yes                            | Yes                              | Yes                           ||||
| **Column ordering** | Yes                                 | Yes                            | Yes                              | Yes                           ||||

*/

/*doc
---
title: Stacked-to-horizontal example
name: d-ex-horizontal
category: Layout - Grid system
---

Using a single set of `.col-md-*` grid classes, you can create a basic grid system that starts out stacked on mobile devices and tablet devices (the extra small to small range) before becoming horizontal on desktop (medium) devices. Place grid columns in any `<m-row>`.

```html_example
<m-container fluid>
  <m-row>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-1">.col-md-1</div>
  </m-row>
  <m-row>
    <div style="background:#999;border:1px solid #333;" class="col-md-8">.col-md-8</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-4">.col-md-4</div>
  </m-row>
  <m-row>
    <div style="background:#999;border:1px solid #333;" class="col-md-4">.col-md-4</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-4">.col-md-4</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-4">.col-md-4</div>
  </m-row>
  <m-row>
    <div style="background:#999;border:1px solid #333;" class="col-md-6">.col-md-6</div>
    <div style="background:#999;border:1px solid #333;" class="col-md-6">.col-md-6</div>
  </m-row>
</m-container>
```


*/


m-container {
  @include container-fixed();

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

m-container[fluid] {
  @include container-fixed();
}


// Row
//
// Rows contain and clear the floats of your columns.

m-row {
  display: block;
  @include make-row();
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}
